-- MySQL Script generated by MySQL Workbench
-- Mon Nov 23 03:45:26 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering
	
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema GIS-CONFIG
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema GIS-CONFIG
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `GIS-CONFIG` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_ru_0900_ai_ci ;
USE `GIS-CONFIG` ;

-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`USER`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`USER` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`USER` (
  `GUID` VARCHAR(40) NOT NULL,
  `USER_NAME` VARCHAR(45) NOT NULL,
  `USERPASSWORD` VARCHAR(45) NULL,
  `PASSWORDHASH` VARCHAR(45) NULL,
  PRIMARY KEY (`GUID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`SYS_DOMAIN`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`SYS_DOMAIN` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`SYS_DOMAIN` (
  `DOMAIN` VARCHAR(10) NOT NULL,
  `DESCRIPTION` TEXT NULL,
  PRIMARY KEY (`DOMAIN`),
  UNIQUE INDEX `DOMAIN_UNIQUE` (`DOMAIN` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`SYS_ROLE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`SYS_ROLE` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`SYS_ROLE` (
  `ROLE` VARCHAR(45) NOT NULL,
  `DOMAIN` VARCHAR(10) NOT NULL,
  `DESCRIPTION` TEXT NULL,
  PRIMARY KEY (`DOMAIN`, `ROLE`),
  INDEX `fk_SYS_ROLES_DOMAIN_idx` (`DOMAIN` ASC),
  INDEX `fk_USR_ROLES_SYS_ROLE_idx` (`ROLE` ASC, `DOMAIN` ASC),
  CONSTRAINT `fk_SYS_ROLES_DOMAIN`
    FOREIGN KEY (`DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`TEAM`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`TEAM` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`TEAM` (
  `GUID` VARCHAR(40) NOT NULL,
  `TEAM_NAME` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`GUID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`ROLE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`ROLE` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`ROLE` (
  `GUID` VARCHAR(40) NOT NULL,
  `USER_GUID` VARCHAR(40) NOT NULL,
  `ROLE_NAME` VARCHAR(45) NOT NULL,
  `DOMAIN` VARCHAR(10) GENERATED ALWAYS AS ('USR-ROL') STORED,
  PRIMARY KEY (`GUID`),
  INDEX `fk_USR_USERROLES_USR_USERS1_idx` (`USER_GUID` ASC),
  INDEX `fk_USR_ROLES_SYS_ROLE_idx` (`ROLE_NAME` ASC, `DOMAIN` ASC),
  CONSTRAINT `fk_USR_ROLES_USERS`
    FOREIGN KEY (`USER_GUID`)
    REFERENCES `GIS-CONFIG`.`USER` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_USR_ROLES_SYS_ROLE`
    FOREIGN KEY (`ROLE_NAME` , `DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_ROLE` (`ROLE` , `DOMAIN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`PARTICIPATION`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`PARTICIPATION` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`PARTICIPATION` (
  `GUID` VARCHAR(40) NOT NULL,
  `TEAM_GUID` VARCHAR(40) NOT NULL,
  `USER_GUID` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`GUID`),
  INDEX `fk_USR_GROUPMEMBERS_USR_USERS1_idx` (`USER_GUID` ASC),
  INDEX `fk_USR_GROUPMEMBERS_GROUPS_idx` (`TEAM_GUID` ASC),
  CONSTRAINT `fk_USR_PARTICIPATION_USER`
    FOREIGN KEY (`USER_GUID`)
    REFERENCES `GIS-CONFIG`.`USER` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_USR_PARTICIPATION_TEAM`
    FOREIGN KEY (`TEAM_GUID`)
    REFERENCES `GIS-CONFIG`.`TEAM` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`SYS_TYPE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`SYS_TYPE` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`SYS_TYPE` (
  `TYPE` VARCHAR(45) NOT NULL,
  `DOMAIN` VARCHAR(10) NOT NULL,
  `DESCRIPTION` TEXT NULL,
  PRIMARY KEY (`TYPE`, `DOMAIN`),
  INDEX `FK_SYS_TYPES_DOMAIN_idx` (`DOMAIN` ASC),
  CONSTRAINT `FK_SYS_TYPES_DOMAIN`
    FOREIGN KEY (`DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`SYS_STATUS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`SYS_STATUS` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`SYS_STATUS` (
  `STATUS` VARCHAR(10) NOT NULL,
  `DOMAIN` VARCHAR(10) NOT NULL,
  `DESCRIPTION` TEXT NULL,
  `PREV` VARCHAR(10) NULL,
  `NEXT` VARCHAR(10) NULL,
  PRIMARY KEY (`STATUS`, `DOMAIN`),
  INDEX `fk_SYS_STATUSES_DOMAIN_idx` (`DOMAIN` ASC),
  INDEX `fk_SYS_STATUS_SYS_STATUS1_idx` (`PREV` ASC, `DOMAIN` ASC),
  INDEX `fk_SYS_STATUS_SYS_STATUS2_idx` (`NEXT` ASC, `DOMAIN` ASC),
  CONSTRAINT `fk_SYS_STATUSES_DOMAIN`
    FOREIGN KEY (`DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`)
    ON DELETE RESTRICT
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SYS_STATUS_PREV`
    FOREIGN KEY (`PREV` , `DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_STATUS` (`STATUS` , `DOMAIN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SYS_STATUS_NEXT`
    FOREIGN KEY (`NEXT` , `DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_STATUS` (`STATUS` , `DOMAIN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`PRODUCT`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`PRODUCT` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`PRODUCT` (
  `GUID` VARCHAR(40) NOT NULL,
  `PRODUCT_NAME` VARCHAR(45) NULL,
  `STATUS` VARCHAR(10) NOT NULL,
  `DOMAIN` VARCHAR(10) GENERATED ALWAYS AS ('PRC-PRD') STORED,
  `TYPE` VARCHAR(45) NOT NULL DEFAULT 'TEST',
  PRIMARY KEY (`GUID`),
  INDEX `fk_PRC_PRODUCT_SYS_STATUS_idx` (`STATUS` ASC, `DOMAIN` ASC),
  INDEX `fk_PRC_PRODUCT_SYS_TYPE_idx` (`TYPE` ASC, `DOMAIN` ASC),
  CONSTRAINT `fk_PRC_PRODUCTS_SYS_STATUS`
    FOREIGN KEY (`STATUS` , `DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_STATUS` (`STATUS` , `DOMAIN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PRC_PRODUCTS_SYS_TYPE`
    FOREIGN KEY (`TYPE` , `DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_TYPE` (`TYPE` , `DOMAIN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`CASE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`CASE` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`CASE` (
  `GUID` VARCHAR(40) NOT NULL,
  `CASE_NAME` VARCHAR(255) NULL,
  `DESCRIPTION` TEXT NULL,
  `STATUS` VARCHAR(10) NOT NULL DEFAULT 'DRAFT',
  `DOMAIN` VARCHAR(10) GENERATED ALWAYS AS ('PRJ-CAS') STORED,
  PRIMARY KEY (`GUID`),
  INDEX `fk_PRJ_CASES_SYS_STATUS_idx` (`DOMAIN` ASC, `STATUS` ASC),
  CONSTRAINT `fk_PRJ_CASES_SYS_STATUS`
    FOREIGN KEY (`DOMAIN` , `STATUS`)
    REFERENCES `GIS-CONFIG`.`SYS_STATUS` (`DOMAIN` , `STATUS`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`SOLUTION`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`SOLUTION` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`SOLUTION` (
  `GUID` VARCHAR(40) NOT NULL,
  `SOLUTION_NAME` VARCHAR(255) NOT NULL,
  `DESCRIPTION` TEXT NULL,
  `STATUS` VARCHAR(10) NOT NULL DEFAULT 'OK',
  `DOMAIN` VARCHAR(10) GENERATED ALWAYS AS ('PRJ-SOL') STORED,
  `CASE_GUID` VARCHAR(40) NULL,
  `PRODUCT_GUID` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`GUID`),
  INDEX `fk_GIS_SOLUTION_SYS_STATUS_idx` (`DOMAIN` ASC, `STATUS` ASC),
  INDEX `fk_SOL_SOLUTION_PRB_PROBLEM_idx` (`CASE_GUID` ASC),
  INDEX `fk_SOLUTION_PRODUCT1_idx` (`PRODUCT_GUID` ASC),
  CONSTRAINT `fk_PRJ_SOLUTION_SYS_STATUS`
    FOREIGN KEY (`DOMAIN` , `STATUS`)
    REFERENCES `GIS-CONFIG`.`SYS_STATUS` (`DOMAIN` , `STATUS`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PRJ_SOLUTIONS_CASE`
    FOREIGN KEY (`CASE_GUID`)
    REFERENCES `GIS-CONFIG`.`CASE` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SOLUTIONS_PRODUCT`
    FOREIGN KEY (`PRODUCT_GUID`)
    REFERENCES `GIS-CONFIG`.`PRODUCT` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`RESOURCE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`RESOURCE` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`RESOURCE` (
  `GUID` VARCHAR(40) NOT NULL,
  `RESOURCE_NAME` VARCHAR(255) NOT NULL,
  `DESCRIPTION` TEXT NULL,
  `TYPE` VARCHAR(45) NOT NULL,
  `PRODUCT_GUID` VARCHAR(40) NOT NULL,
  `DOMAIN` VARCHAR(10) GENERATED ALWAYS AS ('GIS-RES') STORED,
  `SOLUTION_GUID` VARCHAR(40) NULL,
  PRIMARY KEY (`GUID`),
  INDEX `fk_GIS_RESOURCES_SYS_TYPE_idx` (`TYPE` ASC, `DOMAIN` ASC),
  INDEX `fk_GIS_RESOURCES_PRODUCT_idx` (`PRODUCT_GUID` ASC),
  INDEX `fk_RESOURCE_SOLUTION1_idx` (`SOLUTION_GUID` ASC),
  CONSTRAINT `fk_GIS_RESOURCES_TYPE`
    FOREIGN KEY (`TYPE` , `DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_TYPE` (`TYPE` , `DOMAIN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_GIS_RESOURCES_PRC_PRODUCT`
    FOREIGN KEY (`PRODUCT_GUID`)
    REFERENCES `GIS-CONFIG`.`PRODUCT` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_GIS_RESOURCE_PRJ_SOLUTION`
    FOREIGN KEY (`SOLUTION_GUID`)
    REFERENCES `GIS-CONFIG`.`SOLUTION` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`TERRITORY`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`TERRITORY` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`TERRITORY` (
  `GUID` VARCHAR(40) NOT NULL,
  `TERRITORY_NAME` VARCHAR(255) NULL,
  `TERRITORY_CODE` VARCHAR(40) NULL,
  PRIMARY KEY (`GUID`),
  CONSTRAINT `fk_GIS_TERRITORIES_GIS_RESOURCES1`
    FOREIGN KEY (`GUID`)
    REFERENCES `GIS-CONFIG`.`RESOURCE` (`GUID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`MAP`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`MAP` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`MAP` (
  `GUID` VARCHAR(40) NOT NULL,
  `MAP_NAME` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`GUID`),
  CONSTRAINT `fk_GIS_MAP_RESOURCE`
    FOREIGN KEY (`GUID`)
    REFERENCES `GIS-CONFIG`.`RESOURCE` (`GUID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`SCRIPT`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`SCRIPT` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`SCRIPT` (
  `GUID` VARCHAR(40) NOT NULL,
  `SCRIPT_NAME` VARCHAR(255) NOT NULL,
  `DESCRIPTION` TEXT NULL,
  PRIMARY KEY (`GUID`),
  CONSTRAINT `fk_ACT_SCRIPT_GIS_RESOURCE`
    FOREIGN KEY (`GUID`)
    REFERENCES `GIS-CONFIG`.`RESOURCE` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`PROCESS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`PROCESS` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`PROCESS` (
  `GUID` VARCHAR(40) NOT NULL,
  `PROCESS_NAME` VARCHAR(255) NOT NULL,
  `DESCRIPTION` TEXT NULL,
  `PROCESSAREA` LONGTEXT NULL,
  `TYPE` VARCHAR(45) NOT NULL,
  `SCRIPT_GUID` VARCHAR(40) NOT NULL,
  `DOMAIN` VARCHAR(10) GENERATED ALWAYS AS ('BPM-PRC') STORED,
  PRIMARY KEY (`GUID`),
  INDEX `fk_BPM_PROCESSES_SYS_TYPE_idx` (`TYPE` ASC, `DOMAIN` ASC),
  INDEX `fk_BPM_PROCESSES_ACT_SCRIPT_idx` (`SCRIPT_GUID` ASC),
  CONSTRAINT `fk_BPM_PROCESSES_SYS_TYPE`
    FOREIGN KEY (`TYPE` , `DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_TYPE` (`TYPE` , `DOMAIN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_BPM_PROCESSES_ACT_SCRIPT`
    FOREIGN KEY (`SCRIPT_GUID`)
    REFERENCES `GIS-CONFIG`.`SCRIPT` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Ключевой элемент операционного планирования в рамках решаемой задачи. Схемы BPM связывают PROCESS с ELEMENT и DATASOURCE. При внесении изменений в схему, формируются ELEMENTS на каждый TASK процесса.';


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`ELEMENT`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`ELEMENT` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`ELEMENT` (
  `GUID` VARCHAR(40) NOT NULL,
  `TEXTAREA` LONGTEXT NULL,
  `PROCESS_GUID` VARCHAR(40) NOT NULL,
  `ELEMENT_NAME` VARCHAR(255) NULL,
  `RESULT` LONGTEXT NULL,
  `TYPE` VARCHAR(45) NOT NULL,
  `DOMAIN` VARCHAR(10) GENERATED ALWAYS AS ('BPM-ELM') STORED,
  `SCHEMA` JSON NULL,
  `WIDGETAREA` JSON NULL,
  `WIDGETLIST` JSON NULL,
  PRIMARY KEY (`GUID`),
  INDEX `fk_ACT_ELEMENTS_PROCESS_idx` (`PROCESS_GUID` ASC),
  INDEX `fk_ELEMENTS_SYS_TYPE_idx` (`TYPE` ASC, `DOMAIN` ASC),
  UNIQUE INDEX `SECONDARY` (`PROCESS_GUID` ASC, `ELEMENT_NAME` ASC),
  CONSTRAINT `fk_BPM_ELEMENTS_PROCESS`
    FOREIGN KEY (`PROCESS_GUID`)
    REFERENCES `GIS-CONFIG`.`PROCESS` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_BPM_ELEMENTS_SYS_TYPE`
    FOREIGN KEY (`TYPE` , `DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_TYPE` (`TYPE` , `DOMAIN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'CKEditor';


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`DATASOURCE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`DATASOURCE` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`DATASOURCE` (
  `GUID` VARCHAR(40) NOT NULL,
  `DATASOURCE_NAME` VARCHAR(255) NOT NULL,
  `DESCRIPTION` TEXT NULL,
  `DATASOURCE_CONFIGURATION` JSON NULL,
  `DOMAIN` VARCHAR(10) GENERATED ALWAYS AS ('ETL-DWH') STORED,
  `TYPE` VARCHAR(10) NOT NULL,
  `STATUS` VARCHAR(10) NOT NULL DEFAULT 'INACTIVE',
  `RESOURCE_GUID` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`GUID`),
  INDEX `fk_DATASOURCES_SYS_TYPE_idx` (`DOMAIN` ASC, `TYPE` ASC),
  INDEX `fk_DATASOURCES_SYS_STATUS_idx` (`STATUS` ASC, `DOMAIN` ASC),
  INDEX `fk_DATASOURCES_RESOURCE_idx` (`RESOURCE_GUID` ASC),
  CONSTRAINT `fk_ETL_DATASOURCES_SYS_TYPE`
    FOREIGN KEY (`DOMAIN` , `TYPE`)
    REFERENCES `GIS-CONFIG`.`SYS_TYPE` (`DOMAIN` , `TYPE`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ETL_DATASOURCES_SYS_STATUS`
    FOREIGN KEY (`STATUS` , `DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_STATUS` (`STATUS` , `DOMAIN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_DATASOURCE_RESOURCE1`
    FOREIGN KEY (`RESOURCE_GUID`)
    REFERENCES `GIS-CONFIG`.`RESOURCE` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Служит мостом между WIDGET и PROCESS, указывается на схеме BPM, служит для получения наборов данных DATASET, необходимых для исполнения SCRIPT';


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`WIDGET`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`WIDGET` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`WIDGET` (
  `GUID` VARCHAR(40) NOT NULL,
  `TEXTAREA` LONGTEXT NULL,
  `WIDGET_NAME` VARCHAR(255) NULL,
  `FORM_SCHEMA` JSON NULL,
  `FORM_DEFAULTS` JSON NULL,
  `FORM_STYLE` JSON NULL,
  `XML` JSON NULL,
  `XSD` JSON NULL,
  `CSS` JSON NULL,
  `JS` JSON NULL,
  `DOMAIN` VARCHAR(10) GENERATED ALWAYS AS ('ACT-WGT') STORED,
  `TYPE` VARCHAR(45) NOT NULL,
  `STATUS` VARCHAR(10) NOT NULL DEFAULT 'DRAFT',
  `DATASOURCE_GUID` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`GUID`),
  INDEX `fk_WIDGET_SYS_TYPE1_idx` (`TYPE` ASC, `DOMAIN` ASC),
  INDEX `fk_WIDGET_SYS_STATUS1_idx` (`DOMAIN` ASC, `STATUS` ASC),
  INDEX `fk_WIDGET_DATASOURCE1_idx` (`DATASOURCE_GUID` ASC),
  CONSTRAINT `fk_ACT_WIDGETS_SYS_TYPE`
    FOREIGN KEY (`TYPE` , `DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_TYPE` (`TYPE` , `DOMAIN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ACT_WIDGETS_SYS_STATUS`
    FOREIGN KEY (`DOMAIN` , `STATUS`)
    REFERENCES `GIS-CONFIG`.`SYS_STATUS` (`DOMAIN` , `STATUS`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ACT_WIDGETS_ETL_DATASOURCE`
    FOREIGN KEY (`DATASOURCE_GUID`)
    REFERENCES `GIS-CONFIG`.`DATASOURCE` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`DATASET`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`DATASET` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`DATASET` (
  `GUID` VARCHAR(40) NOT NULL,
  `DATASET_NAME` VARCHAR(255) NULL,
  `WIDGET_GUID` VARCHAR(40) NULL,
  `DATASETAREA` JSON NULL,
  `DATASOURCE_GUID` VARCHAR(40) NULL,
  `REFRESHABLE` TINYINT NULL,
  `ELEMENT_GUID` VARCHAR(40) NOT NULL,
  `TYPE` VARCHAR(45) NOT NULL DEFAULT 'UNDEFINED',
  `DOMAIN` VARCHAR(10) GENERATED ALWAYS AS ('ETL-DTS') STORED,
  `STATUS` VARCHAR(10) NULL DEFAULT 'EMPTY',
  `DATASETSCHEMA` VARCHAR(45) GENERATED ALWAYS AS (SELECT WGT.FORM_SCHEMA FROM WIDGET AS WGT WHERE WIDGET_GUID = WGT.GUID),
  PRIMARY KEY (`GUID`),
  INDEX `fk_ACT_DATASETS_ACT_WIDGET_idx` (`WIDGET_GUID` ASC),
  INDEX `fk_DATASETS_DATASOURCE_idx` (`DATASOURCE_GUID` ASC),
  INDEX `fk_DATASET_ELEMENT1_idx` (`ELEMENT_GUID` ASC),
  INDEX `fk_DATASET_SYS_TYPE1_idx` (`TYPE` ASC, `DOMAIN` ASC),
  INDEX `fk_DATASET_SYS_STATUS1_idx` (`STATUS` ASC, `DOMAIN` ASC),
  CONSTRAINT `fk_ACT_DATASETS_WIDGET`
    FOREIGN KEY (`WIDGET_GUID`)
    REFERENCES `GIS-CONFIG`.`WIDGET` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_DATASETS_DATASOURCE`
    FOREIGN KEY (`DATASOURCE_GUID`)
    REFERENCES `GIS-CONFIG`.`DATASOURCE` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_DATASET_ELEMENT1`
    FOREIGN KEY (`ELEMENT_GUID`)
    REFERENCES `GIS-CONFIG`.`ELEMENT` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_DATASET_SYS_TYPE1`
    FOREIGN KEY (`TYPE` , `DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_TYPE` (`TYPE` , `DOMAIN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_DATASET_SYS_STATUS1`
    FOREIGN KEY (`STATUS` , `DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_STATUS` (`STATUS` , `DOMAIN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'формируется путем запроса к DATASOURCE и содержит данные полученные в TASK WORKFLOW  и необходимы для формирования RESULT при исполнении PROCESS или SCRIPT. Возможен обратная последовательность действий, когда по имеющемуся DATASET проектируется DATASOURCE в качестве интерфейса';


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`RESULT`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`RESULT` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`RESULT` (
  `GUID` VARCHAR(40) NOT NULL,
  `TEXTAREA` LONGTEXT NULL,
  `RESULT_NAME` VARCHAR(255) NULL,
  `ELEMENT_GUID` VARCHAR(40) NOT NULL,
  `CREATE_DATE` DATETIME NULL,
  `MODIFY_DATE` DATETIME NULL,
  `TYPE` VARCHAR(45) NOT NULL,
  `DOMAIN` VARCHAR(10) GENERATED ALWAYS AS ('ACT-RLT') STORED,
  `DATASET_GUID` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`GUID`),
  INDEX `fk_ACT_RESULTS_SYS_TYPE1_idx` (`DOMAIN` ASC, `TYPE` ASC),
  INDEX `fk_RESULT_DATASET1_idx` (`DATASET_GUID` ASC),
  CONSTRAINT `fk_ACT_RESULTS_BPM_ELEMENT`
    FOREIGN KEY (`ELEMENT_GUID`)
    REFERENCES `GIS-CONFIG`.`ELEMENT` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ACT_RESULTS_SYS_TYPE`
    FOREIGN KEY (`DOMAIN` , `TYPE`)
    REFERENCES `GIS-CONFIG`.`SYS_TYPE` (`DOMAIN` , `TYPE`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ACT_RESULT_ETL_DATASET`
    FOREIGN KEY (`DATASET_GUID`)
    REFERENCES `GIS-CONFIG`.`DATASET` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`KEYFRAME`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`KEYFRAME` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`KEYFRAME` (
  `GUID` VARCHAR(40) NOT NULL,
  `TEXTAREA` LONGTEXT NULL,
  `INDEX` INT NOT NULL,
  `SCRIPT_GUID` VARCHAR(40) NOT NULL,
  `ELEMENT_GUID` VARCHAR(40) NOT NULL,
  `RESULT_GUID` VARCHAR(40) NULL,
  `VERSION_CONTROL` TINYINT NULL DEFAULT 0,
  PRIMARY KEY (`GUID`),
  UNIQUE INDEX `fk_ACT_KEYFRAMES_SCRIPT_idx` (`SCRIPT_GUID` ASC),
  INDEX `fk_ACT_KEYFRAME_RESULT_idx` (`RESULT_GUID` ASC),
  INDEX `fk_ACT_KEYFRAME_BPM_ELEMENT_idx` (`ELEMENT_GUID` ASC),
  CONSTRAINT `fk_ACT_KEYFRAMES_SCRIPT`
    FOREIGN KEY (`SCRIPT_GUID`)
    REFERENCES `GIS-CONFIG`.`SCRIPT` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ACT_KEYFRAME_RESULT`
    FOREIGN KEY (`RESULT_GUID`)
    REFERENCES `GIS-CONFIG`.`RESULT` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ACT_KEYFRAME_BPM_ELEMENT`
    FOREIGN KEY (`ELEMENT_GUID`)
    REFERENCES `GIS-CONFIG`.`ELEMENT` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`ACCESSCONTROLLIST`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`ACCESSCONTROLLIST` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`ACCESSCONTROLLIST` (
  `GUID` VARCHAR(40) NOT NULL,
  `TEAM_GUID` VARCHAR(40) NOT NULL,
  `PRODUCT_GUID` VARCHAR(40) NULL,
  `RESOURCE_GUID` VARCHAR(40) NULL,
  INDEX `fk_USR_GRANTS_USR_GROUPS1_idx` (`TEAM_GUID` ASC),
  PRIMARY KEY (`GUID`),
  INDEX `fk_USR_ACL_GIS_RESOURCES_idx` (`RESOURCE_GUID` ASC),
  INDEX `fk_USR_ACL_PRJ_SOLUTION_idx` (`PRODUCT_GUID` ASC),
  CONSTRAINT `fk_USR_ACL_TEAM`
    FOREIGN KEY (`TEAM_GUID`)
    REFERENCES `GIS-CONFIG`.`TEAM` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_USR_ACL_PRJ_SOLUTION`
    FOREIGN KEY (`PRODUCT_GUID`)
    REFERENCES `GIS-CONFIG`.`PRODUCT` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_USR_ACL_GIS_RESOURCE`
    FOREIGN KEY (`RESOURCE_GUID`)
    REFERENCES `GIS-CONFIG`.`RESOURCE` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`LAYER`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`LAYER` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`LAYER` (
  `GUID` VARCHAR(40) NOT NULL,
  `LAYER_NAME` VARCHAR(255) NOT NULL,
  `LAYER_INDEX` INT NOT NULL,
  `MAP_GUID` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`GUID`),
  INDEX `fk_GIS_LAYER_GIS_MAPS1_idx` (`MAP_GUID` ASC),
  CONSTRAINT `fk_GIS_LAYER_GIS_MAPS1`
    FOREIGN KEY (`MAP_GUID`)
    REFERENCES `GIS-CONFIG`.`MAP` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`AREA`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`AREA` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`AREA` (
  `GUID` VARCHAR(45) NOT NULL,
  `AREA_NAME` VARCHAR(255) NOT NULL,
  `AREA_CODE` VARCHAR(45) NULL,
  `LEVEL_INDEX` INT NOT NULL,
  `TERRITORY_GUID` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`GUID`),
  INDEX `fk_GIS_LAYER_GIS_MAPS10_idx` (`TERRITORY_GUID` ASC),
  CONSTRAINT `fk_GIS_AREAS_TERRITORY`
    FOREIGN KEY (`TERRITORY_GUID`)
    REFERENCES `GIS-CONFIG`.`TERRITORY` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`APPLICATION`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`APPLICATION` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`APPLICATION` (
  `GUID` VARCHAR(40) NOT NULL,
  `APPLICATION_NAME` VARCHAR(255) NULL,
  PRIMARY KEY (`GUID`),
  CONSTRAINT `fk_GIS_TERRITORIES_GIS_RESOURCES10`
    FOREIGN KEY (`GUID`)
    REFERENCES `GIS-CONFIG`.`RESOURCE` (`GUID`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`FEATURE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`FEATURE` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`FEATURE` (
  `GUID` VARCHAR(40) NOT NULL,
  `FEATURE_NAME` VARCHAR(255) NOT NULL,
  `CODE` JSON NULL,
  `FEATURE_INDEX` INT NOT NULL,
  `APPLICATION_GUID` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`GUID`),
  INDEX `fk_GIS_LAYER_GIS_MAPS10_idx` (`APPLICATION_GUID` ASC),
  CONSTRAINT `fk_GIS_AREAS_TERRITORY0`
    FOREIGN KEY (`APPLICATION_GUID`)
    REFERENCES `GIS-CONFIG`.`APPLICATION` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`WORKFLOW`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`WORKFLOW` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`WORKFLOW` (
  `GUID` VARCHAR(40) NOT NULL,
  `WORKFLOW_NAME` VARCHAR(255) NOT NULL,
  `RESOURCE_GUID` VARCHAR(40) NULL,
  `DATE_FROM` DATETIME NULL,
  `DATE_TO` DATETIME NULL,
  `STATUS` VARCHAR(10) NOT NULL DEFAULT 'DRAFT',
  `DOMAIN` VARCHAR(10) GENERATED ALWAYS AS ('ETL-WRF') STORED,
  `SCHEDULE` JSON NOT NULL,
  `SOURCE_GUID` VARCHAR(40) NOT NULL,
  `DESTINATION_GUID` VARCHAR(40) NOT NULL,
  PRIMARY KEY (`GUID`),
  INDEX `fk_WORKFLOW_RESOURCE_idx` (`RESOURCE_GUID` ASC),
  INDEX `fk_WORKFLOWS_SYS_STATUS_idx` (`DOMAIN` ASC, `STATUS` ASC),
  INDEX `fk_WORKFLOW_DATASOURCE1_idx` (`SOURCE_GUID` ASC),
  INDEX `fk_WORKFLOW_DATASOURCE2_idx` (`DESTINATION_GUID` ASC),
  CONSTRAINT `fk_ETL_WORKFLOWS_RESOURCE`
    FOREIGN KEY (`RESOURCE_GUID`)
    REFERENCES `GIS-CONFIG`.`RESOURCE` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ETL_WORKFLOWS_SYS_STATUS`
    FOREIGN KEY (`DOMAIN` , `STATUS`)
    REFERENCES `GIS-CONFIG`.`SYS_STATUS` (`DOMAIN` , `STATUS`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ETL_WORKFLOWS_DATASOURCE_IN`
    FOREIGN KEY (`SOURCE_GUID`)
    REFERENCES `GIS-CONFIG`.`DATASOURCE` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ETL_WORKFLOWS_DATASOURCE_OUT`
    FOREIGN KEY (`DESTINATION_GUID`)
    REFERENCES `GIS-CONFIG`.`DATASOURCE` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = '\'{\"HOLIDAYS\":[\"DAYOFWEEK\":\'6\',\"DAYOFWEEK\":\'7\',\"DAYOFYEAR\":\'01.01\'],\"PERIOD\":[\"VALUE\":1,\"DIMENSION\":\"DAY\"]}\'';


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`JOB`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`JOB` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`JOB` (
  `GUID` VARCHAR(40) NOT NULL,
  `JOB_NAME` VARCHAR(255) GENERATED ALWAYS AS (CONCAT(WORKFLOW_GUID,'-',DATE_FORMAT(PLAN_TIME,'%d.%m.%Y'))) STORED,
  `WORKFLOW_GUID` VARCHAR(40) NOT NULL,
  `STATUS` VARCHAR(10) NOT NULL DEFAULT 'PLANNED',
  `DOMAIN` VARCHAR(10) GENERATED ALWAYS AS ('ETL-JOB') STORED,
  `PLAN_TIME` DATETIME NOT NULL,
  `START_TIME` DATETIME NULL,
  `FINISH_TIME` DATETIME NULL,
  PRIMARY KEY (`GUID`),
  INDEX `fk_JOBS_WORKFLOW_idx` (`WORKFLOW_GUID` ASC),
  INDEX `fk_JOBS_SYS_STATUS_idx` (`STATUS` ASC, `DOMAIN` ASC),
  CONSTRAINT `fk_ETL_JOBS_WORKFLOW`
    FOREIGN KEY (`WORKFLOW_GUID`)
    REFERENCES `GIS-CONFIG`.`WORKFLOW` (`GUID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ETL_JOBS_SYS_STATUS`
    FOREIGN KEY (`STATUS` , `DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_STATUS` (`STATUS` , `DOMAIN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GIS-CONFIG`.`SYS_TEMPLATE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `GIS-CONFIG`.`SYS_TEMPLATE` ;

CREATE TABLE IF NOT EXISTS `GIS-CONFIG`.`SYS_TEMPLATE` (
  `TEMPLATE_NAME` VARCHAR(45) NOT NULL,
  `DOMAIN` VARCHAR(10) NOT NULL,
  `TEMPLATE` LONGTEXT NOT NULL,
  `FEATURES` JSON NULL,
  `DESCRIPTION` TEXT NULL,
  PRIMARY KEY (`TEMPLATE_NAME`, `DOMAIN`),
  INDEX `fk_SYS_TEMPLATE_SYS_DOMAIN1_idx` (`DOMAIN` ASC),
  CONSTRAINT `fk_SYS_TEMPLATE_SYS_DOMAIN1`
    FOREIGN KEY (`DOMAIN`)
    REFERENCES `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `GIS-CONFIG`;

DELIMITER $$

USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`USER_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`USER_BEFORE_INSERT` BEFORE INSERT ON `USER` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('USR-USE-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`TEAM_BEFORE_INSERT_WRONG_SCHEMA` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`TEAM_BEFORE_INSERT` BEFORE INSERT ON `TEAM` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('USR-TEA-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`ROLE_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`ROLE_BEFORE_INSERT` BEFORE INSERT ON `ROLE` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('USR-ROL-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`USR_PARTICIPATION_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`USR_PARTICIPATION_BEFORE_INSERT` BEFORE INSERT ON `PARTICIPATION` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('USR-PAR-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`PRODUCT_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`PRODUCT_BEFORE_INSERT` BEFORE INSERT ON `PRODUCT` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('PRC-PRD-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`CASE_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`CASE_BEFORE_INSERT` BEFORE INSERT ON `CASE` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('PRJ-PRB-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`SOLUTION_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`SOLUTION_BEFORE_INSERT` BEFORE INSERT ON `SOLUTION` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('PRJ-SOL-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`RESOURCE_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`RESOURCE_BEFORE_INSERT` BEFORE INSERT ON `RESOURCE` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('GIS-RES-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`RESOURCE_AFTER_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER=`bds`@`%` TRIGGER `RESOURCE_AFTER_INSERT` AFTER INSERT ON `RESOURCE` FOR EACH ROW BEGIN

CASE 
	WHEN NEW.TYPE='SCRIPT'
		THEN
			IF (SELECT GUID FROM SCRIPT WHERE GUID=NEW.GUID) IS NULL THEN
				INSERT INTO SCRIPT(GUID, SCRIPT_NAME)
				VALUES(NEW.GUID, NEW.RESOURCE_NAME);
			END IF;
	WHEN NEW.TYPE='MAP'
		THEN
			IF (SELECT GUID FROM MAP WHERE GUID=NEW.GUID) IS NULL THEN
				INSERT INTO MAP(GUID, MAP_NAME)
				VALUES(NEW.GUID, NEW.RESOURCE_NAME);
			END IF;
    WHEN NEW.TYPE='TERRITORY'
		THEN
        			IF (SELECT GUID FROM TERRITORY WHERE GUID=NEW.GUID) IS NULL THEN
				INSERT INTO TERRITORY(GUID, TERRITORY_NAME)
				VALUES(NEW.GUID, NEW.RESOURCE_NAME);
			END IF;
	WHEN NEW.TYPE='APPLICATION'
		THEN			
			IF (SELECT GUID FROM APPLICATION WHERE GUID=NEW.GUID) IS NULL THEN
				INSERT INTO APPLICATION(GUID, APPLICATION_NAME)
				VALUES(NEW.GUID, NEW.RESOURCE_NAME);
			END IF;
END CASE;

END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`TERRITORY_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`TERRITORY_BEFORE_INSERT` BEFORE INSERT ON `TERRITORY` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('GIS-TER-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`MAP_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`MAP_BEFORE_INSERT` BEFORE INSERT ON `MAP` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('GIS-MAP-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`SCRIPT_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`SCRIPT_BEFORE_INSERT` BEFORE INSERT ON `SCRIPT` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('ACT-SCR-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`PROCESS_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`PROCESS_BEFORE_INSERT` BEFORE INSERT ON `PROCESS` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('BPM-PRC-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`PROCESS_GET_TEMPLATE` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`PROCESS_GET_TEMPLATE` BEFORE INSERT ON `PROCESS` FOR EACH ROW
BEGIN
	DECLARE done INT DEFAULT FALSE;
	DECLARE i,j INT  DEFAULT 0;
    DECLARE X_coordinate INT  DEFAULT 0;
	DECLARE base_template TEXT DEFAULT "";
    DECLARE dataset_template TEXT DEFAULT "";
    DECLARE dataset_shape_template TEXT DEFAULT "";
    DECLARE dataset_name TEXT DEFAULT "";
    DECLARE json_key TEXT;
    DECLARE json_value TEXT;
    DECLARE update_value TEXT;
    DECLARE features_base JSON;
    DECLARE features_dataset JSON;
    DECLARE features_dataset_shape JSON;
	DECLARE CURSOR_DATASOURCE CURSOR FOR SELECT DATASOURCE_NAME FROM DATASOURCE WHERE STATUS NOT LIKE 'ARCHIVE';
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

	IF ISNULL(NEW.PROCESSAREA) OR NEW.PROCESSAREA = "" THEN
		  SELECT FEATURES FROM SYS_TEMPLATE WHERE TEMPLATE_NAME="BPM-BASE" AND DOMAIN_NAME='TPL-BPM' INTO features_base;
		SELECT 
    TEMPLATE
FROM
    SYS_TEMPLATE
WHERE
    TEMPLATE_NAME = 'BPM-BASE'
        AND DOMAIN_NAME = 'TPL-BPM' INTO base_template;

		  SET X_coordinate = 196;
		  SET i = 1;
		  SET json_key = "";
		  WHILE i<=JSON_LENGTH(features_base) DO
            SET json_key = JSON_UNQUOTE(JSON_EXTRACT(features_base,CONCAT('$."',i,'"[0]')));
            SET json_value = JSON_UNQUOTE(JSON_EXTRACT(features_base,CONCAT('$."',i,'"[1]')));
			IF json_key != 'NEXT' THEN
				CASE json_value 
					WHEN 'GUID7' THEN SET update_value = LEFT(md5(UUID()),7);
					WHEN 'GUID36' THEN SET update_value = LEFT((UUID()),36);
					ELSE SET update_value = json_value;
				END CASE;
				SELECT REPLACE(base_template,CONCAT('{{', json_key, '}}'),update_value) INTO base_template; 
			END IF;
			SET i = i + 1;
		  END WHILE;
	  
		  SET j=1;
          OPEN CURSOR_DATASOURCE;
          FETCH CURSOR_DATASOURCE INTO dataset_name;
		  WHILE NOT done DO
				SELECT TEMPLATE FROM SYS_TEMPLATE WHERE TEMPLATE_NAME="BPM-DATASET" AND DOMAIN_NAME="TPL-BPM" INTO dataset_template;
				SELECT TEMPLATE FROM SYS_TEMPLATE WHERE TEMPLATE_NAME = "BPM-DATASET-SHAPE" AND DOMAIN_NAME = "TPL-BPM" INTO dataset_shape_template;
				SELECT FEATURES FROM SYS_TEMPLATE WHERE TEMPLATE_NAME = "BPM-DATASET" AND DOMAIN_NAME = "TPL-BPM" INTO features_dataset;
				SELECT FEATURES FROM SYS_TEMPLATE WHERE TEMPLATE_NAME = "BPM-DATASET-SHAPE" AND DOMAIN_NAME = "TPL-BPM" INTO features_dataset_shape;
 
				SET i = 1;
				WHILE i<=JSON_LENGTH(features_dataset) DO
					SET json_key = JSON_UNQUOTE(JSON_EXTRACT(features_dataset,CONCAT('$."',i,'"[0]')));
					SET json_value = JSON_UNQUOTE(JSON_EXTRACT(features_dataset,CONCAT('$."',i,'"[1]')));
					IF json_key != 'NEXT' THEN
						CASE json_value 
							WHEN 'GUID7' THEN SET update_value = LEFT(md5(UUID()),7);
							WHEN 'GUID36' THEN SET update_value = LEFT((UUID()),36);
							WHEN 'DATASET_NAME' THEN SET update_value = dataset_name;
							ELSE SET update_value = json_value;
						END CASE;
                        SELECT REPLACE(base_template,CONCAT('{{', json_key, '}}'),update_value) INTO base_template; 
						SELECT REPLACE(dataset_template,CONCAT('{{', json_key, '}}'), update_value) INTO dataset_template;
						SELECT REPLACE(dataset_shape_template, CONCAT('{{', json_key, '}}'), update_value) INTO dataset_shape_template;
					END IF;
					SET i = i + 1;
				END WHILE;
				SELECT REPLACE(base_template,CONCAT('{{{', 'BPM-DATASET-REFERENCE', '}}}'),CONCAT(dataset_template,'{{{','BPM-DATASET-REFERENCE','}}}')) INTO base_template;

				SET i = 1;
				WHILE i<=JSON_LENGTH(features_dataset_shape) DO
					SET json_key = JSON_UNQUOTE(JSON_EXTRACT(features_dataset_shape,CONCAT('$."',i,'"[0]')));
					SET json_value = JSON_UNQUOTE(JSON_EXTRACT(features_dataset_shape,CONCAT('$."',i,'"[1]')));
					SET update_value = "";
					IF json_key != 'NEXT' THEN
						CASE json_value 
							WHEN 'X-COORDINATE195+' THEN 
									SET update_value = X_coordinate; 
									SET X_coordinate = X_coordinate + 100;
							WHEN 'GUID7' THEN SET update_value = LEFT(md5(UUID()),7);
							WHEN 'GUID36' THEN SET update_value = LEFT((UUID()),36);
							ELSE SET update_value = json_value;
						END CASE;
                        SELECT REPLACE(base_template,CONCAT('{{', json_key, '}}'),update_value) INTO base_template; 
						SELECT REPLACE(dataset_shape_template, CONCAT('{{', json_key, '}}'), update_value) INTO dataset_shape_template;
					END IF;
					SET i = i + 1;
				END WHILE;
				SELECT REPLACE(base_template, CONCAT('{{{', 'BPM-DATASET-SHAPE', '}}}'), CONCAT(dataset_shape_template,'{{{','BPM-DATASET-SHAPE','}}}')) INTO base_template;
				FETCH CURSOR_DATASOURCE INTO dataset_name;
          END WHILE;
          CLOSE CURSOR_DATASOURCE;
       SET NEW.PROCESSAREA = base_template;
	END IF;
    
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`PROCESS_AFTER_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`PROCESS_AFTER_INSERT` AFTER INSERT ON `PROCESS` FOR EACH ROW
BEGIN
	DECLARE done INT DEFAULT FALSE;
	DECLARE i,j INT  DEFAULT 0;
    DECLARE element_to_insert,element_to_delete TEXT  DEFAULT '';
    DECLARE old_processarea TEXT;
	DECLARE new_processarea TEXT;
    DECLARE old_processes JSON;
	DECLARE new_processes JSON;
    SET new_processarea = NEW.PROCESSAREA;
	SELECT CAST(concat('{"task":["',replace(ExtractValue(new_processarea,'//task/@name'),' ','","'),'"]}') AS JSON) INTO new_processes;
    SET i = 0;
	WHILE i< JSON_LENGTH(new_processes,CONCAT('$.task')) DO
      
        SET element_to_insert = JSON_UNQUOTE(JSON_EXTRACT(new_processes,CONCAT('$.task[',i,']')));
		IF element_to_insert != '' THEN
				INSERT INTO `GIS-CONFIG`.`ELEMENT`
							(`PROCESS_GUID`,
							 `ELEMENT_NAME`,
							 `TYPE`)
						VALUES
							(NEW.GUID,
							 element_to_insert,
							 'TASK');
        END IF;
		SET i = i + 1;
    END WHILE;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`PROCESS_AFTER_UPDATE` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`PROCESS_AFTER_UPDATE` AFTER UPDATE ON `PROCESS` FOR EACH ROW
BEGIN
	DECLARE done INT DEFAULT FALSE;
	DECLARE i,j,k INT  DEFAULT 0;
    DECLARE element_to_insert,element_to_delete TEXT  DEFAULT '';
    DECLARE old_processarea TEXT;
	DECLARE new_processarea TEXT;
	DECLARE old_id TEXT;
	DECLARE new_id TEXT;
    DECLARE old_processes JSON;
	DECLARE new_processes JSON;
	DECLARE old_processes_id JSON;
	DECLARE new_processes_id JSON;
	SET old_processarea = OLD.PROCESSAREA;
    SET new_processarea = NEW.PROCESSAREA;
	SELECT CAST(concat('{"task":["',replace(ExtractValue(old_processarea,'//task/@name'),' ','","'),'"]}') AS JSON) INTO old_processes;
	SELECT CAST(concat('{"task":["',replace(ExtractValue(new_processarea,'//task/@name'),' ','","'),'"]}') AS JSON) INTO new_processes;
	SELECT CAST(concat('{"task":["',replace(ExtractValue(old_processarea,'//task/@id'),' ','","'),'"]}') AS JSON) INTO old_processes_id;
	SELECT CAST(concat('{"task":["',replace(ExtractValue(new_processarea,'//task/@id'),' ','","'),'"]}') AS JSON) INTO new_processes_id;

	SET i = 0;
	WHILE i< JSON_LENGTH(old_processes,CONCAT('$.task')) DO
        SET j = 0;
        SET element_to_delete = JSON_UNQUOTE(JSON_EXTRACT(old_processes,CONCAT('$.task[',i,']')));
        WHILE j < JSON_LENGTH(new_processes,CONCAT('$.task')) DO
				IF element_to_delete = JSON_UNQUOTE(JSON_EXTRACT(new_processes,CONCAT('$.task[',j,']'))) THEN
					SET element_to_delete = '';
                END IF;
			SET j = j + 1;
        END WHILE;
		SET old_id = JSON_UNQUOTE(JSON_EXTRACT(old_processes_id,CONCAT('$.task[',i,']')));
		SET k = 0;
		WHILE k < JSON_LENGTH(new_processes_id,CONCAT('$.task')) DO
				IF old_id = JSON_UNQUOTE(JSON_EXTRACT(new_processes_id,CONCAT('$.task[',k,']'))) THEN
					SET element_to_delete = '';
                    UPDATE `GIS-CONFIG`.`ELEMENT`
							SET `ELEMENT_NAME` = JSON_UNQUOTE(JSON_EXTRACT(new_processes,CONCAT('$.task[',k,']')))
							WHERE `PROCESS_GUID` = NEW.GUID AND `ELEMENT_NAME` = JSON_UNQUOTE(JSON_EXTRACT(old_processes,CONCAT('$.task[',i,']')));
                END IF;
				SET k = k + 1;
		END WHILE;
		IF element_to_delete != '' THEN
				DELETE FROM `GIS-CONFIG`.`ELEMENT` WHERE ELEMENT_NAME = element_to_delete;
		END IF;
		SET i = i + 1;
    END WHILE;
    SET i = 0;
	WHILE i < JSON_LENGTH(new_processes,CONCAT('$.task')) DO
        SET j = 0;
        SET element_to_insert = JSON_UNQUOTE(JSON_EXTRACT(new_processes,CONCAT('$.task[',i,']')));
        WHILE j< JSON_LENGTH(old_processes,CONCAT('$.task')) DO
				IF element_to_insert = JSON_UNQUOTE(JSON_EXTRACT(old_processes,CONCAT('$.task[',j,']'))) THEN
					SET element_to_insert = '';
                END IF;
			SET j = j + 1;
        END WHILE;
		SET new_id = JSON_UNQUOTE(JSON_EXTRACT(new_processes_id,CONCAT('$.task[',i,']')));
        SET k = 0;
		WHILE k < JSON_LENGTH(old_processes_id,CONCAT('$.task')) DO
			IF new_id = JSON_UNQUOTE(JSON_EXTRACT(old_processes_id,CONCAT('$.task[',k,']'))) THEN
				SET element_to_insert = '';
			END IF;
            SET k = k + 1;
        END WHILE;
        IF element_to_insert != '' THEN
				INSERT INTO `GIS-CONFIG`.`ELEMENT`
							(`PROCESS_GUID`,
							 `ELEMENT_NAME`,
							 `TYPE`)
						VALUES
							(NEW.GUID,
							 element_to_insert,
							 'TASK');
        END IF;
		SET i = i + 1;
    END WHILE;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`ELEMENT_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`ELEMENT_BEFORE_INSERT` BEFORE INSERT ON `ELEMENT` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('BPM-ELM-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`ELEMENT_AFTER_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`ELEMENT_AFTER_INSERT` AFTER INSERT ON `ELEMENT` FOR EACH ROW
BEGIN

	DECLARE done INT DEFAULT FALSE;
	DECLARE i,j INT  DEFAULT 0;
    DECLARE datasource_guid_to_link,datasource_name_to_link, dataset_name_to_insert TEXT  DEFAULT '';
	DECLARE new_element_name,new_element_giud TEXT;
	DECLARE new_datasources_in, new_datasources_out JSON;
	DECLARE datasets JSON;
    SET new_element_name = NEW.ELEMENT_NAME;
    SET new_element_giud = NEW.GUID;

   
    SELECT CAST(concat('{"datasource":["',replace(DATASOURCE_IN,' ','","'),'"]}') AS JSON) FROM `GIS-CONFIG`.V_PROCESS_DATASOURCES_BY_ELEMENT WHERE ELEMENT_NAME=new_element_name INTO new_datasources_in;
	SELECT CAST(concat('{"datasource":["',replace(DATASOURCE_OUT,' ','","'),'"]}') AS JSON) FROM `GIS-CONFIG`.V_PROCESS_DATASOURCES_BY_ELEMENT WHERE ELEMENT_NAME=new_element_name INTO new_datasources_out;

    SET i = 0;
	WHILE i< JSON_LENGTH(new_datasources_in,CONCAT('$.datasource')) DO
      
        SET datasource_name_to_link = JSON_UNQUOTE(JSON_EXTRACT(new_datasources_in,CONCAT('$.datasource[',i,']')));
		SET dataset_name_to_insert = '';
        IF  datasource_name_to_link != '' THEN
			SET dataset_name_to_insert = concat('FROM_',JSON_UNQUOTE(JSON_EXTRACT(new_datasources_in,CONCAT('$.datasource[',i,']'))));
        END IF;
        SET datasource_guid_to_link = '';
        SELECT GUID FROM `GIS-CONFIG`.DATASOURCE WHERE DATASOURCE_NAME = datasource_name_to_link INTO datasource_guid_to_link;
		SELECT CAST(concat('{"dataset":["',replace(DATASET_NAME,' ','","'),'"]}') AS JSON) FROM `GIS-CONFIG`.DATASET WHERE DATASET_NAME = dataset_name_to_insert AND ELEMENT_GUID = new_element_giud AND DATASOURCE_GUID = datasource_guid_to_link INTO datasets;
        SET j = 0;
        WHILE j< JSON_LENGTH(datasets,CONCAT('$.dataset')) AND dataset_name_to_insert != '' DO
			IF dataset_name_to_insert = JSON_UNQUOTE(JSON_EXTRACT(datasets,CONCAT('$.dataset[',j,']'))) THEN 
				SET dataset_name_to_insert = '';
			END IF;
			SET j = j + 1;
		END WHILE;
		IF dataset_name_to_insert != '' THEN
				INSERT INTO `GIS-CONFIG`.`DATASET`
							(`ELEMENT_GUID`,
                            `DATASOURCE_GUID`,
							 `DATASET_NAME`)
						VALUES
							(new_element_giud,
                            datasource_guid_to_link,
							 dataset_name_to_insert);
        END IF;
		SET i = i + 1;
    END WHILE;
    
	SET i = 0;
	WHILE i< JSON_LENGTH(new_datasources_out,CONCAT('$.datasource')) DO
              
		SET datasource_name_to_link = JSON_UNQUOTE(JSON_EXTRACT(new_datasources_out,CONCAT('$.datasource[',i,']')));
        SET dataset_name_to_insert = '';
        IF  datasource_name_to_link != '' THEN
			SET dataset_name_to_insert = concat('TO_',JSON_UNQUOTE(JSON_EXTRACT(new_datasources_out,CONCAT('$.datasource[',i,']'))));
        END IF;
        SET datasource_guid_to_link = '';
        SELECT GUID FROM `GIS-CONFIG`.DATASOURCE WHERE DATASOURCE_NAME = datasource_name_to_link INTO datasource_guid_to_link;
		SELECT CAST(concat('{"dataset":["',replace(DATASET_NAME,' ','","'),'"]}') AS JSON) FROM `GIS-CONFIG`.DATASET WHERE DATASET_NAME = dataset_name_to_insert AND ELEMENT_GUID = new_element_giud AND DATASOURCE_GUID = datasource_guid_to_link  INTO datasets;
        SET j = 0;
        WHILE j< JSON_LENGTH(datasets,CONCAT('$.dataset')) AND dataset_name_to_insert != '' DO
			IF dataset_name_to_insert = JSON_UNQUOTE(JSON_EXTRACT(datasets,CONCAT('$.dataset[',j,']'))) THEN 
				SET dataset_name_to_insert = '';
			END IF;
			SET j = j + 1;
		END WHILE;
		IF dataset_name_to_insert != '' THEN
				INSERT INTO `GIS-CONFIG`.`DATASET`
							(`ELEMENT_GUID`,
                            `DATASOURCE_GUID`,
							`DATASET_NAME`)
						VALUES
							(new_element_giud,
                             datasource_guid_to_link,
							 dataset_name_to_insert);
        END IF;
		SET i = i + 1;
    END WHILE;
    
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`ELEMENT_AFTER_UPDATE` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`ELEMENT_AFTER_UPDATE` AFTER UPDATE ON `ELEMENT` FOR EACH ROW
BEGIN

	# обновление состава DATASET при перестановке связей в PROCESS
    
    DECLARE done INT DEFAULT FALSE;
	DECLARE i,j INT  DEFAULT 0;
    DECLARE datasource_guid_to_link,datasource_name_to_link, dataset_name_to_insert TEXT  DEFAULT '';
	DECLARE new_element_name,new_element_giud TEXT;
	DECLARE new_datasources_in, new_datasources_out JSON;
	DECLARE datasets JSON;
    SET new_element_name = NEW.ELEMENT_NAME;
    SET new_element_giud = NEW.GUID;

    
    SELECT CAST(concat('{"datasource":["',replace(DATASOURCE_IN,' ','","'),'"]}') AS JSON) FROM `GIS-CONFIG`.V_PROCESS_DATASOURCES_BY_ELEMENT WHERE ELEMENT_NAME=new_element_name INTO new_datasources_in;
	SELECT CAST(concat('{"datasource":["',replace(DATASOURCE_OUT,' ','","'),'"]}') AS JSON) FROM `GIS-CONFIG`.V_PROCESS_DATASOURCES_BY_ELEMENT WHERE ELEMENT_NAME=new_element_name INTO new_datasources_out;

    SET i = 0;
	WHILE i< JSON_LENGTH(new_datasources_in,CONCAT('$.datasource')) DO
      
        SET datasource_name_to_link = JSON_UNQUOTE(JSON_EXTRACT(new_datasources_in,CONCAT('$.datasource[',i,']')));
		SET dataset_name_to_insert = '';
        IF  datasource_name_to_link != '' THEN
			SET dataset_name_to_insert = concat('FROM_',JSON_UNQUOTE(JSON_EXTRACT(new_datasources_in,CONCAT('$.datasource[',i,']'))));
        END IF;
        SET datasource_guid_to_link = '';
        SELECT GUID FROM `GIS-CONFIG`.DATASOURCE WHERE DATASOURCE_NAME = datasource_name_to_link INTO datasource_guid_to_link;
		SELECT CAST(concat('{"dataset":["',replace(DATASET_NAME,' ','","'),'"]}') AS JSON) FROM `GIS-CONFIG`.DATASET WHERE DATASET_NAME = dataset_name_to_insert AND ELEMENT_GUID = new_element_giud AND DATASOURCE_GUID = datasource_guid_to_link INTO datasets;
        SET j = 0;
        WHILE j< JSON_LENGTH(datasets,CONCAT('$.dataset')) AND dataset_name_to_insert != '' DO
			IF dataset_name_to_insert = JSON_UNQUOTE(JSON_EXTRACT(datasets,CONCAT('$.dataset[',j,']'))) THEN 
				SET dataset_name_to_insert = '';
			END IF;
			SET j = j + 1;
		END WHILE;
		IF dataset_name_to_insert != '' THEN
				INSERT INTO `GIS-CONFIG`.`DATASET`
							(`ELEMENT_GUID`,
                            `DATASOURCE_GUID`,
							 `DATASET_NAME`)
						VALUES
							(new_element_giud,
                            datasource_guid_to_link,
							 dataset_name_to_insert);
        END IF;
		SET i = i + 1;
    END WHILE;
    
	SET i = 0;
	WHILE i< JSON_LENGTH(new_datasources_out,CONCAT('$.datasource')) DO
              
		SET datasource_name_to_link = JSON_UNQUOTE(JSON_EXTRACT(new_datasources_out,CONCAT('$.datasource[',i,']')));
        SET dataset_name_to_insert = '';
        IF  datasource_name_to_link != '' THEN
			SET dataset_name_to_insert = concat('TO_',JSON_UNQUOTE(JSON_EXTRACT(new_datasources_out,CONCAT('$.datasource[',i,']'))));
        END IF;
        SET datasource_guid_to_link = '';
        SELECT GUID FROM `GIS-CONFIG`.DATASOURCE WHERE DATASOURCE_NAME = datasource_name_to_link INTO datasource_guid_to_link;
		SELECT CAST(concat('{"dataset":["',replace(DATASET_NAME,' ','","'),'"]}') AS JSON) FROM `GIS-CONFIG`.DATASET WHERE DATASET_NAME = dataset_name_to_insert AND ELEMENT_GUID = new_element_giud AND DATASOURCE_GUID = datasource_guid_to_link  INTO datasets;
        SET j = 0;
        WHILE j< JSON_LENGTH(datasets,CONCAT('$.dataset')) AND dataset_name_to_insert != '' DO
			IF dataset_name_to_insert = JSON_UNQUOTE(JSON_EXTRACT(datasets,CONCAT('$.dataset[',j,']'))) THEN 
				SET dataset_name_to_insert = '';
			END IF;
			SET j = j + 1;
		END WHILE;
		IF dataset_name_to_insert != '' THEN
				INSERT INTO `GIS-CONFIG`.`DATASET`
							(`ELEMENT_GUID`,
                            `DATASOURCE_GUID`,
							`DATASET_NAME`)
						VALUES
							(new_element_giud,
                             datasource_guid_to_link,
							 dataset_name_to_insert);
        END IF;
		SET i = i + 1;
    END WHILE;
    
	# очистка DATASET при удалении связей для двух направлений
    
	DELETE FROM `GIS-CONFIG`.`DATASET` WHERE GUID IN (SELECT GUID FROM (SELECT dset.GUID FROM `GIS-CONFIG`.DATASET AS dset, `GIS-CONFIG`.DATASOURCE AS dsource  
		WHERE dsource.GUID = dset.DATASOURCE_GUID AND dset.DATASET_NAME = concat('FROM_',DATASOURCE_NAME) AND dset.ELEMENT_GUID=new_element_giud
			AND dsource.DATASOURCE_NAME NOT IN  (SELECT `V_PROCESS_DATASOURCES_BY_ELEMENT`.`DATASOURCE_IN` 
											FROM `GIS-CONFIG`.`V_PROCESS_DATASOURCES_BY_ELEMENT` WHERE `V_PROCESS_DATASOURCES_BY_ELEMENT`.`ELEMENT_NAME`=new_element_name)) AS c);

	DELETE FROM `GIS-CONFIG`.`DATASET` WHERE GUID IN (SELECT GUID FROM (SELECT dset.GUID FROM `GIS-CONFIG`.DATASET AS dset, `GIS-CONFIG`.DATASOURCE AS dsource  
		WHERE dsource.GUID = dset.DATASOURCE_GUID AND dset.DATASET_NAME = concat('TO_',DATASOURCE_NAME) AND dset.ELEMENT_GUID=new_element_giud
			AND dsource.DATASOURCE_NAME NOT IN  (SELECT `V_PROCESS_DATASOURCES_BY_ELEMENT`.`DATASOURCE_OUT` 
											FROM `GIS-CONFIG`.`V_PROCESS_DATASOURCES_BY_ELEMENT` WHERE `V_PROCESS_DATASOURCES_BY_ELEMENT`.`ELEMENT_NAME`=new_element_name)) AS c);

END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`DATASOURCE_BEFORE_INSERT_WRONG_SCHEMA` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`DATASOURCE_BEFORE_INSERT` BEFORE INSERT ON `DATASOURCE` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('ETL-DWH-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`WIDGET_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`WIDGET_BEFORE_INSERT` BEFORE INSERT ON `WIDGET` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('ACT-WGT-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`DATASET_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`DATASET_BEFORE_INSERT` BEFORE INSERT ON `DATASET` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('ETL-DTS-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`RESULT_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`RESULT_BEFORE_INSERT` BEFORE INSERT ON `RESULT` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('ACT-RES-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`KEYRFAME_BEFORE_INSERT_WRONG_SCHEMA` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`KEYRFAME_BEFORE_INSERT` BEFORE INSERT ON `KEYFRAME` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('ACT-KEY-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`ACCESSCONTROLLIST_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`ACCESSCONTROLLIST_BEFORE_INSERT` BEFORE INSERT ON `ACCESSCONTROLLIST` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('USR-ACC-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`LAYER_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`LAYER_BEFORE_INSERT` BEFORE INSERT ON `LAYER` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('GIS-LAY-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`AREA_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`AREA_BEFORE_INSERT` BEFORE INSERT ON `AREA` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('GIS-ARE-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`APPLICATION_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`APPLICATION_BEFORE_INSERT` BEFORE INSERT ON `APPLICATION` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('GIS-APP-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`FEATURE_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`FEATURE_BEFORE_INSERT` BEFORE INSERT ON `FEATURE` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('GIS-FEA-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`WORKFLOW_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`WORKFLOW_BEFORE_INSERT` BEFORE INSERT ON `WORKFLOW` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('ETL-WRF-',UPPER(md5(UUID())));
 END IF;
END$$


USE `GIS-CONFIG`$$
DROP TRIGGER IF EXISTS `GIS-CONFIG`.`JOB_BEFORE_INSERT` $$
USE `GIS-CONFIG`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GIS-CONFIG`.`JOB_BEFORE_INSERT` BEFORE INSERT ON `JOB` FOR EACH ROW
BEGIN
IF ISNULL(NEW.GUID) THEN
 SET NEW.GUID = CONCAT('ETL-JOB-',UPPER(md5(UUID())));
 END IF;
END$$


DELIMITER ;



-- -----------------------------------------------------
-- Data for table `GIS-CONFIG`.`SYS_DOMAIN`
-- -----------------------------------------------------
START TRANSACTION;
USE `GIS-CONFIG`;
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('GIS', 'Гео-аналитическая система');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('GIS-RES', 'Ресурсный компонент ГИС');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('ETL', 'Модуль загрузки и преобразования данных');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('ETL-DWH', 'Описание источника данных и метода использования');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('ACT', 'Конструктор программного кода');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('ACT-WGT', 'Модуль low-code шаблонов использования программного кода');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('ACT-SCP', 'Исполняемые сценарии ');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('BPM-PRC', 'Модуль подготовки сценариев');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('ETL-WTF', 'Задача обработки источника данных');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('ETL-JOB', 'Выполнение задачи обработки источника данных');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('PRJ', 'Проект внедрения системы');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('PRJ-CAS', 'Постановка задачи');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('PRJ-SOL', 'Внедряемое решение');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('USR', 'Модуль разграничения доступа для участников внедрения');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('USR-ROL', 'Роли участников внедрения');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('PRC-PRD', 'Программный продукт или система');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('ACT-RLT', 'Тип результата исполнения секции');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('TPL', 'Шаблоны');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('TPL-DWH', 'Шаблоны источников данных');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('TPL-BPM', 'Шаблоны процессов');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('BPM', 'Управление процессами');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('BPM-ELM', 'Элемент схемы процесса');
INSERT INTO `GIS-CONFIG`.`SYS_DOMAIN` (`DOMAIN`, `DESCRIPTION`) VALUES ('ETL-DTS', 'Датасеты');

COMMIT;


-- -----------------------------------------------------
-- Data for table `GIS-CONFIG`.`SYS_ROLE`
-- -----------------------------------------------------
START TRANSACTION;
USE `GIS-CONFIG`;
INSERT INTO `GIS-CONFIG`.`SYS_ROLE` (`ROLE`, `DOMAIN`, `DESCRIPTION`) VALUES ('GIS-ADM', 'USR-ROL', 'Администратор ГИС');
INSERT INTO `GIS-CONFIG`.`SYS_ROLE` (`ROLE`, `DOMAIN`, `DESCRIPTION`) VALUES ('ETL-USR', 'USR-ROL', 'Оператор загрузки данных');
INSERT INTO `GIS-CONFIG`.`SYS_ROLE` (`ROLE`, `DOMAIN`, `DESCRIPTION`) VALUES ('ETL-ADM', 'USR-ROL', 'Администратор загрузки данных');
INSERT INTO `GIS-CONFIG`.`SYS_ROLE` (`ROLE`, `DOMAIN`, `DESCRIPTION`) VALUES ('ACT-ADM', 'USR-ROL', 'Администратор сценариев обработки данных');
INSERT INTO `GIS-CONFIG`.`SYS_ROLE` (`ROLE`, `DOMAIN`, `DESCRIPTION`) VALUES ('USR-ADM', 'USR-ROL', 'Администратор участников проекта');
INSERT INTO `GIS-CONFIG`.`SYS_ROLE` (`ROLE`, `DOMAIN`, `DESCRIPTION`) VALUES ('ACT-USR', 'USR-ROL', 'Оператор сценариев обработки данных');

COMMIT;


-- -----------------------------------------------------
-- Data for table `GIS-CONFIG`.`SYS_TYPE`
-- -----------------------------------------------------
START TRANSACTION;
USE `GIS-CONFIG`;
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('SCRIPT', 'GIS-RES', 'Сценарий');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('MAP', 'GIS-RES', 'Карта');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('TERRITORY', 'GIS-RES', 'Территория');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('APPLICATION', 'GIS-RES', 'Приложение');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('MAINPAGE', 'BPM-PRC', 'Главная страницы сайта');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('JAVASCRIPT', 'BPM-PRC', 'Программные элементы сайта');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('ANALYTIC', 'BPM-PRC', 'Аналитическое представление');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('GETERATE-SVG', 'BPM-PRC', 'Конфигуратор подготовки векторных изображений карты');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('GENERATE-YANDEX', 'BPM-PRC', 'Конфигуратор Яндекс карты');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('GENERATE-OSM', 'BPM-PRC', 'Конфигуратор OSM карты');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('MAP-LAYERS', 'ACT-WGT', 'Слой карты');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('TERRITORY-AREAS', 'ACT-WGT', 'Район');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('MYSQL', 'ETL-DWH', 'Источник данных MYSQL');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('BUCKET', 'ETL-DWH', 'Хранилище данных Yandex Cloud');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('FILE-EXCEL', 'ETL-DWH', 'Источник данных Excel');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('GIS-SYSTEM', 'PRC-PRD', 'Гео-аналитическая система');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('JAVASCRIPT', 'ACT-RLT', 'Программный код на языке Javascript');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('PYTHON', 'ACT-RLT', 'Программный код на языке Python');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('HTML', 'ACT-RLT', 'Вэб-страница html');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('UNDEFINED', 'ETL-DTS', 'Не определен');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('WORKSHEET', 'ETL-DTS', 'Excel лист');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('FILE-CSV', 'ETL-DTS', 'файл в формате CSV');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('FILE-OSM', 'ETL-DTS', 'файл в формате OpenStreetMap');
INSERT INTO `GIS-CONFIG`.`SYS_TYPE` (`TYPE`, `DOMAIN`, `DESCRIPTION`) VALUES ('DATABASE-DATA', 'ETL-DTS', 'выгрузка из БД');

COMMIT;


-- -----------------------------------------------------
-- Data for table `GIS-CONFIG`.`SYS_STATUS`
-- -----------------------------------------------------
START TRANSACTION;
USE `GIS-CONFIG`;
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('DRAFT', 'PRJ-CAS', 'Черновик', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('ACTIVE', 'PRJ-CAS', 'Используется', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('ARCHIVE', 'PRJ-CAS', 'Архивный', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('DRAFT', 'PRJ-SOL', 'Черновик', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('ACTIVE', 'PRJ-SOL', 'Используется', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('ARCHIVE', 'PRJ-SOL', 'Архивный', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('ACTIVE', 'GIS-RES', 'Используется', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('INACTIVE', 'GIS-RES', 'Не используется', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('ACTIVE', 'BPM-PRC', 'Используется', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('ARCHIVE', 'BPM-PRC', 'Архивный', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('DRAFT', 'ACT-WGT', 'Черновик', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('ACTIVE', 'ACT-WGT', 'Используется', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('ARCHIVE', 'ACT-WGT', 'Архивный', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('DRAFT', 'ETL-DWH', 'Черновик', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('ACTIVE', 'ETL-DWH', 'Используется', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('INACTIVE', 'ETL-DWH', 'Не используется', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('ARCHIVE', 'ETL-DWH', 'Архивный', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('DRAFT', 'ETL-WRF', 'Черновик', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('ACTIVE', 'ETL-WRF', 'Используется', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('INACTIVE', 'ETL-WRF', 'Не используется', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('ARCHIVE', 'ETL-WRF', 'Архивный', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('PLANNED', 'ETL-JOB', 'Запланирована', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('STARTED', 'ETL-JOB', 'Выполняется', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('FINISHED', 'ETL-JOB', 'Выполнена успешно', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('DISABLED', 'ETL-JOB', 'Отменена', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('FAILED', 'ETL-JOB', 'Выполнена с ошибкой', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('TEST', 'PRC-PRD', 'На тестировании', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('PROD', 'PRC-PRD', 'В использовании', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('UC', 'PRC-PRD', 'В разработке', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('MAINTAINED', 'PRC-PRD', 'В обслуживании', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('EMPTY', 'ETL-DTS', 'Не загружен', NULL, NULL);
INSERT INTO `GIS-CONFIG`.`SYS_STATUS` (`STATUS`, `DOMAIN`, `DESCRIPTION`, `PREV`, `NEXT`) VALUES ('LOADED', 'ETL-DTS', 'Загружен', NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `GIS-CONFIG`.`PRODUCT`
-- -----------------------------------------------------
START TRANSACTION;
USE `GIS-CONFIG`;
INSERT INTO `GIS-CONFIG`.`PRODUCT` (`GUID`, `PRODUCT_NAME`, `STATUS`, `DOMAIN`, `TYPE`) VALUES ('PRC-PRD-95C74F2E63134F1F4403E0A6EDEC97AC', 'Гео-аналитическая система Цифровой Новгород', 'UC', DEFAULT, 'GIS-SYSTEM');

COMMIT;


-- -----------------------------------------------------
-- Data for table `GIS-CONFIG`.`CASE`
-- -----------------------------------------------------
START TRANSACTION;
USE `GIS-CONFIG`;
INSERT INTO `GIS-CONFIG`.`CASE` (`GUID`, `CASE_NAME`, `DESCRIPTION`, `STATUS`, `DOMAIN`) VALUES ('PRJ-CAS-5B650209C29DB489DB9115DBDDA0017B', 'Визуализация случаев обнаружения COVID-19', 'Необходимо отмечать на карте места проживания лиц, у которых подтверждена инфекция COVID-19', 'ACTIVE', DEFAULT);

COMMIT;


-- -----------------------------------------------------
-- Data for table `GIS-CONFIG`.`SOLUTION`
-- -----------------------------------------------------
START TRANSACTION;
USE `GIS-CONFIG`;
INSERT INTO `GIS-CONFIG`.`SOLUTION` (`GUID`, `SOLUTION_NAME`, `DESCRIPTION`, `STATUS`, `DOMAIN`, `CASE_GUID`, `PRODUCT_GUID`) VALUES ('PRJ-SOL-0F68E19A357E59D2AD904BE9B87EDE6C', 'Карта COVID-19 Новгородской области', 'На карту новгородской области нанесены события обнаружения COVID-19 и места проживания лиц вернувшихся из-за границы в виде инфоточек', 'DRAFT', DEFAULT, 'PRJ-CAS-5B650209C29DB489DB9115DBDDA0017B', 'PRC-PRD-95C74F2E63134F1F4403E0A6EDEC97AC');

COMMIT;


-- -----------------------------------------------------
-- Data for table `GIS-CONFIG`.`RESOURCE`
-- -----------------------------------------------------
START TRANSACTION;
USE `GIS-CONFIG`;
INSERT INTO `GIS-CONFIG`.`RESOURCE` ( `RESOURCE_NAME`, `DESCRIPTION`, `TYPE`, `PRODUCT_GUID`,  `SOLUTION_GUID`) VALUES ( 'COVID-19 NOV', 'Карта COVID-19', 'MAP', 'PRC-PRD-95C74F2E63134F1F4403E0A6EDEC97AC',  NULL);
INSERT INTO `GIS-CONFIG`.`RESOURCE` ( `RESOURCE_NAME`, `DESCRIPTION`, `TYPE`, `PRODUCT_GUID`,  `SOLUTION_GUID`) VALUES ( 'WEB COVID-19', 'Статический сайт - Витрина данных о короновирусной инфекции', 'APPLICATION', 'PRC-PRD-95C74F2E63134F1F4403E0A6EDEC97AC',  NULL);
INSERT INTO `GIS-CONFIG`.`RESOURCE` ( `RESOURCE_NAME`, `DESCRIPTION`, `TYPE`, `PRODUCT_GUID`,  `SOLUTION_GUID`) VALUES ( 'NOV', 'Территория новгородской области с разбивкой по муниципальным районам', 'TERRITORY', 'PRC-PRD-95C74F2E63134F1F4403E0A6EDEC97AC',  NULL);
INSERT INTO `GIS-CONFIG`.`RESOURCE` ( `RESOURCE_NAME`, `DESCRIPTION`, `TYPE`, `PRODUCT_GUID`,  `SOLUTION_GUID`) VALUES ( 'WEB MAINPAGE COVID-19', 'Главная страница витрины данных', 'SCRIPT', 'PRC-PRD-95C74F2E63134F1F4403E0A6EDEC97AC',  NULL);
INSERT INTO `GIS-CONFIG`.`RESOURCE` ( `RESOURCE_NAME`, `DESCRIPTION`, `TYPE`, `PRODUCT_GUID`,  `SOLUTION_GUID`) VALUES ( 'WEB JS COVID-19', 'Скрипты витрины данных', 'SCRIPT', 'PRC-PRD-95C74F2E63134F1F4403E0A6EDEC97AC',  NULL);
INSERT INTO `GIS-CONFIG`.`RESOURCE` ( `RESOURCE_NAME`, `DESCRIPTION`, `TYPE`, `PRODUCT_GUID`,  `SOLUTION_GUID`) VALUES ( 'LOAD COVID-19 EXCEL', 'Загрузка данных', 'SCRIPT', 'PRC-PRD-95C74F2E63134F1F4403E0A6EDEC97AC',  NULL);
INSERT INTO `GIS-CONFIG`.`RESOURCE` ( `RESOURCE_NAME`, `DESCRIPTION`, `TYPE`, `PRODUCT_GUID`,  `SOLUTION_GUID`) VALUES ( 'POI GENERATION COVID-19', 'Генерация Инфоточек', 'SCRIPT', 'PRC-PRD-95C74F2E63134F1F4403E0A6EDEC97AC',  NULL);
INSERT INTO `GIS-CONFIG`.`RESOURCE` ( `RESOURCE_NAME`, `DESCRIPTION`, `TYPE`, `PRODUCT_GUID`,  `SOLUTION_GUID`) VALUES ( 'MAP GENERATION SVG COVID-19', 'Генерация Геоточек', 'SCRIPT', 'PRC-PRD-95C74F2E63134F1F4403E0A6EDEC97AC',  NULL);
INSERT INTO `GIS-CONFIG`.`RESOURCE` ( `RESOURCE_NAME`, `DESCRIPTION`, `TYPE`, `PRODUCT_GUID`,  `SOLUTION_GUID`) VALUES ( 'MAP GENERATION YANDEX COVID-19', 'Генерация Инфоточек на Яндекс.Карте', 'SCRIPT', 'PRC-PRD-95C74F2E63134F1F4403E0A6EDEC97AC',  NULL);
INSERT INTO `GIS-CONFIG`.`RESOURCE` ( `RESOURCE_NAME`, `DESCRIPTION`, `TYPE`, `PRODUCT_GUID`,  `SOLUTION_GUID`) VALUES ( 'YANDEX COVID-19', 'Яндекс.Карты - Витрина данных о короновирусной инфекции', 'APPLICATION', 'PRC-PRD-95C74F2E63134F1F4403E0A6EDEC97AC',  NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `GIS-CONFIG`.`SYS_TEMPLATE`
-- -----------------------------------------------------
START TRANSACTION;
USE `GIS-CONFIG`;
INSERT INTO `GIS-CONFIG`.`SYS_TEMPLATE` (`TEMPLATE_NAME`, `DOMAIN`, `TEMPLATE`, `FEATURES`, `DESCRIPTION`) VALUES ('BPM-BASE', 'TPL-BPM', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" targetNamespace=\"\" xsi:schemaLocation=\"http://www.omg.org/spec/BPMN/20100524/MODEL http://www.omg.org/spec/BPMN/2.0/20100501/BPMN20.xsd\">\n  <collaboration id=\"sid-{{GUIDElement}}\">\n    <participant id=\"Participant_{{Process}}\" name=\"Среда автоматизации\" processRef=\"Process_{{Process}}\" />\n    <group id=\"Group_{{Datasets}}\" categoryValueRef=\"CategoryValue_{{Datasets}}\" />\n  </collaboration>\n  <category id=\"Category_{{Datasets}}\">\n    <categoryValue id=\"CategoryValue_{{Datasets}}\" value=\"Доступные наборы данных\" />\n  </category>\n  <process id=\"Process_{{Process}}\">\n    <sequenceFlow id=\"Flow_{{Flow}}\" sourceRef=\"Event_{{Start_Event}}\" targetRef=\"Event_{{End_Event}}\" />\n    {{{BPM-DATASET-REFERENCE}}}\n    <endEvent id=\"Event_{{End_Event}}\">\n      <incoming>Flow_{{Flow}}</incoming>\n    </endEvent>\n    <startEvent id=\"Event_{{Start_Event}}\">\n      <outgoing>Flow_{{Flow}}</outgoing>\n    </startEvent>\n  </process>\n  <bpmndi:BPMNDiagram id=\"sid-{{GUIDDiagram}}\">\n    <bpmndi:BPMNPlane id=\"sid-{{GUIDPlane}}\" bpmnElement=\"{{GUIDElement}}\">\n      <bpmndi:BPMNShape id=\"Participant_{{Process}}_di\" bpmnElement=\"Participant_{{Process}}\" isHorizontal=\"true\">\n        <omgdc:Bounds x=\"160\" y=\"30\" width=\"880\" height=\"250\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge id=\"Flow_{{Flow}}_di\" bpmnElement=\"Flow_{{Flow}}\">\n        <omgdi:waypoint x=\"268\" y=\"150\" />\n        <omgdi:waypoint x=\"932\" y=\"150\" />\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNShape id=\"Event_{{End_Event}}_di\" bpmnElement=\"Event_{{End_Event}}\">\n        <omgdc:Bounds x=\"932\" y=\"132\" width=\"36\" height=\"36\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Event_{{Start_Event}}_di\" bpmnElement=\"Event_{{Start_Event}}\">\n        <omgdc:Bounds x=\"232\" y=\"132\" width=\"36\" height=\"36\" />\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape id=\"Group_{{Datasets}}_di\" bpmnElement=\"Group_{{Datasets}}\">\n        <omgdc:Bounds x=\"160\" y=\"330\" width=\"880\" height=\"140\" />\n        <bpmndi:BPMNLabel>\n          <omgdc:Bounds x=\"560\" y=\"337\" width=\"80\" height=\"27\" />\n        </bpmndi:BPMNLabel>\n      </bpmndi:BPMNShape>\n     {{{BPM-DATASET-SHAPE}}}\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>', '{\"1\": [\"Flow\",\"GUID7\"], \"2\":[\"Process\",\"GUID7\"], \"3\":[\"Datasets\",\"GUID7\"],\"4\":[\"End_Event\",\"GUID7\"],\"5\":[\"GUIDPlane\",\"GUID36\"],\"6\":[\"GUIDDiagram\",\"GUID36\"],\"7\":[\"GUIDElement\",\"GUID36\"],\"8\":[\"Start_Event\",\"GUID7\"]}', 'Шаблон базового процесса без источников данных');
INSERT INTO `GIS-CONFIG`.`SYS_TEMPLATE` (`TEMPLATE_NAME`, `DOMAIN`, `TEMPLATE`, `FEATURES`, `DESCRIPTION`) VALUES ('BPM-DATASET', 'TPL-BPM', '<dataStoreReference id=\"DataStoreReference_{{Dataset}}\" name=\"{{DATASET-NAME}}\" />', '{\"1\":[\"Dataset\",\"GUID7\"],\"2\":[\"NEXT\",\"BPM-DATASET-SHAPE\"],\"3\":[\"DATASET-NAME\",\"DATASET_NAME\"]}', 'Шаблон процесса источника данных');
INSERT INTO `GIS-CONFIG`.`SYS_TEMPLATE` (`TEMPLATE_NAME`, `DOMAIN`, `TEMPLATE`, `FEATURES`, `DESCRIPTION`) VALUES ('BPM-DATASET-SHAPE', 'TPL-BPM', '<bpmndi:BPMNShape id=\"DataStoreReference_{{Dataset}}_di\" bpmnElement=\"DataStoreReference_{{Dataset}}\">\n   <omgdc:Bounds x=\"{{X}}\" y=\"365\" width=\"50\" height=\"50\" />\n   <bpmndi:BPMNLabel>\n     <omgdc:Bounds x=\"{{X}}\" y=\"422\" width=\"50\" height=\"14\" />\n   </bpmndi:BPMNLabel>\n </bpmndi:BPMNShape>', '{\"1\":[\"X\",\"X-COORDINATE195+\"]}', 'Шаблон фигуры источника данных');

COMMIT;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

